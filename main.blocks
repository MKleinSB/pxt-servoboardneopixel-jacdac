<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="3OwrIQVOGK(wgI0!1H@," x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="?*8?.`KE6:~4?Q:7V.IJ"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace modules {" line1="" line2="    /**" line3="     * Calliope mini Neopixelstreifen an Servoboard C8" line4="     */" line5="    //% fixedInstance whenUsed block=&quot;Calliope Neopixelstrip C8&quot;" line6="    //% block.loc.de=&quot;Calliope Neopixelstreifen C8&quot;" line7="    export const CallipeNeopixelStrip1 = new LedClient(&quot;Calliope Neopixelstrip C8?dev=self&amp;num_pixels=50&amp;variant=Strip&quot;)" line8=" " line9="    //% fixedInstance whenUsed block=&quot;Calliope Neopixelstrip C9&quot;" line10="    //% block.loc.de=&quot;Calliope Neopixelstreifen C9&quot;" line11="    export const CallipeNeopixelStrip2 = new LedClient(&quot;Calliope Neopixelstrip C9?dev=self&amp;num_pixels=50&amp;variant=Strip&quot;)" line12="" line13="    /**" line14="     * Custom color picker" line15="     */" line16="    //% blockId=CalliColorNumberPicker block=&quot;%value&quot;" line17="    //% blockHidden=true" line18="    //% group=&quot;LED&quot;" line19="    //% value.fieldEditor=&quot;colornumber&quot; value.fieldOptions.decompileLiterals=true" line20="    //% value.fieldOptions.colours='[&quot;#ffffff&quot;,&quot;#ff0000&quot;,&quot;#ff7f00&quot;,&quot;#fffe00&quot;,&quot;#7fff00&quot;,&quot;#00ff00&quot;,&quot;#00ff7f&quot;,&quot;#00fffe&quot;,&quot;#0040ff&quot;,&quot;#0000ff&quot;,&quot;#6000ff&quot;,&quot;#fe00ff&quot;,&quot;#ff0040&quot;,&quot;#acb3f3&quot;,&quot;#e0acfe&quot;,&quot;#a300ff&quot;,&quot;#ea00ff&quot;,&quot;#ff00e3&quot;,&quot;#fdd3f8&quot;,&quot;#f1d07e&quot;,&quot;#a8b5f5&quot;,&quot;#C3C6D8&quot;, &quot;#f3f2da&quot;,&quot;#727474&quot;, &quot;#000000&quot;]'" line21="    //% value.fieldOptions.columns=5 value.fieldOptions.className='rgbColorPicker'  " line22="    export function CalliColorNumberPicker(value: number) {" line23="        return value;" line24="    }" line25="" line26="    /**" line27="    * Konvertiert den Farbnamen in eine Zahl" line28="    */" line29="    //% blockId=CalliColor block=&quot;%c=CalliColorNumberPicker&quot;" line30="    //% group=&quot;LED&quot; weight=83" line31="    //% c.defl=0xff0000" line32="    //% inlineInputMode=external" line33="    export function CalliColor(c: number): number {" line34="        return c;" line35="    }" line36="" line37="    /**" line38="      * Converts red, green, blue channels into a RGB color" line39="      * @param red value of the red channel between 0 and 255. eg: 255" line40="      * @param green value of the green channel between 0 and 255. eg: 255" line41="      * @param blue value of the blue channel between 0 and 255. eg: 255" line42="      */" line43="    //% weight=3" line44="    //% blockId=&quot;rgb&quot; block=&quot;red %red|green %green|blue %blue&quot;" line45="    //% block.loc.de=&quot;rot %red|grün %green|blau %blue&quot;" line46="    //% group=&quot;LED&quot; weight=82" line47="    export function rgb(red: number, green: number, blue: number): number {" line48="        return ((red &amp; 0xFF) &lt;&lt; 16) | ((green &amp; 0xFF) &lt;&lt; 8) | (blue &amp; 0xFF);" line49="    }" line50="" line51="    /**" line52="          * Sets a gradient between two colors" line53="          * @param startColor the start color" line54="          * @param endColor the end color" line55="          */" line56="    //% blockId=lightsetgradient " line57="    //% block=&quot;show gradient from %startColor=CalliColorNumberPicker to %endColor=CalliColorNumberPicker ||startpixel %startp endpixel %endp&quot;" line58="    //% block.loc.de=&quot;zeige Farbverlauf von %startColor=CalliColorNumberPicker nach %endColor=CalliColorNumberPicker ||von Pixel %startp nach Pixel %endp&quot;" line59="    //% startColor.defl=0xff0000 endColor.defl=0x00ff00" line60="    //% startp.defl=0 endp.defl=11" line61="    //% expandableArgumentMode=&quot;toggle&quot;" line62="    //% inlineInputMode=inline" line63="    export function setGradient(startColor: number, endColor: number, startp: number = 0, endp: number = 11) {" line64="        const sr = (startColor &amp; 0xff0000) &gt;&gt; 16;" line65="        const sg = (startColor &amp; 0xff00) &gt;&gt; 8;" line66="        const sb = (startColor &amp; 0xff);" line67="        const er = (endColor &amp; 0xff0000) &gt;&gt; 16;" line68="        const eg = (endColor &amp; 0xff00) &gt;&gt; 8;" line69="        const eb = (endColor &amp; 0xff);" line70="        if (Math.abs(endp - startp) &lt; 3) {" line71="            startp = 0;" line72="            endp = 11;" line73="        }" line74="        const end = endp;" line75="        const start = startp" line76="        if (endp &gt; startp) {" line77="            const n1 = end - start" line78="            for (let i = start; i &lt;= end; ++i) {" line79="                let x = (i - start) / n1;" line80="                const ox = 1 - x;" line81="                const r = (sr * ox + er * x) | 0;" line82="                const g = (sg * ox + eg * x) | 0;" line83="                const b = (sb * ox + eb * x) | 0;" line84="                modules.CallipeNeopixelStrip1.setPixelColor(i, ((r &lt;&lt; 16) + (g &lt;&lt; 8) + b))" line85="            }" line86="            " line87="        } else {" line88="            const n12 = start - end" line89="            for (let j = start; j &gt;= end; --j) {" line90="                let x2 = (j - end) / n12;" line91="                const ox2 = 1 - x2;" line92="                const s = (er * ox2 + sr * x2) | 0;" line93="                const h = (eg * ox2 + sg * x2) | 0;" line94="                const c = (eb * ox2 + sb * x2) | 0;" line95="                modules.CallipeNeopixelStrip1.setPixelColor(j, ((s &lt;&lt; 16) + (h &lt;&lt; 8) + c))" line96="            }" line97="        }" line98="        //Callistrip.show();" line99="    }" line100="" line101="}" numlines="102"></mutation><next><block type="typescript_statement" id="xE!M=6a.(9)%O5z$r|{d"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace servers {" line1="    function start() {" line2="        jacdac.productIdentifier = 0x32690c10" line3="        jacdac.deviceDescription = &quot;Calliope Servoboard Neopixels&quot;" line4="        jacdac.startSelfServers(() =&gt; {" line5="       const servers = [" line6="                new jacdac.LedServer(50," line7="                    jacdac.LedPixelLayout.RgbGrb," line8="                    (pixels, brightness) =&gt; light.sendWS2812BufferWithBrightness(pixels, DigitalPin.C8, brightness), {" line9="                    variant: jacdac.LedVariant.Strip," line10="                    instanceName: &quot;C8&quot;" line11="                })," line12="                new jacdac.LedServer(50," line13="                    jacdac.LedPixelLayout.RgbGrb," line14="                    (pixels, brightness) =&gt; light.sendWS2812BufferWithBrightness(pixels, DigitalPin.C9, brightness), {" line15="                    variant: jacdac.LedVariant.Strip," line16="                    instanceName: &quot;C9&quot;" line17="                }" line18="                )" line19="            ]" line20="            return servers" line21="        })" line22="    }" line23="    start()" line24="}" numlines="25"></mutation></block></next></block></statement></block></xml>